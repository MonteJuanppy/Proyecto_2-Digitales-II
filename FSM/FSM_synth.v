/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* top =  1  *)
(* src = "FSM_synth.v:5" *)
module FSM_synth(reset, clk, init, umbral_alto, umbral_bajo, FIFO_empty, idle, interno_alto, interno_bajo);
  (* src = "FSM_synth.v:24" *)
  wire [2:0] _000_;
  (* src = "FSM_synth.v:24" *)
  wire [2:0] _001_;
  (* src = "FSM_synth.v:41" *)
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire [3:0] _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire [4:0] _019_;
  wire [1:0] _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire [1:0] _025_;
  wire [9:0] _026_;
  wire [2:0] _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  (* src = "FSM_synth.v:10" *)
  input [9:0] FIFO_empty;
  (* src = "FSM_synth.v:6" *)
  input clk;
  (* onehot = 32'd1 *)
  reg [3:0] estado;
  (* src = "FSM_synth.v:11" *)
  output idle;
  (* src = "FSM_synth.v:7" *)
  input init;
  (* src = "FSM_synth.v:12" *)
  output [2:0] interno_alto;
  (* src = "FSM_synth.v:21" *)
  reg [2:0] interno_alto_d;
  (* src = "FSM_synth.v:13" *)
  output [2:0] interno_bajo;
  (* src = "FSM_synth.v:22" *)
  reg [2:0] interno_bajo_d;
  (* src = "FSM_synth.v:5" *)
  input reset;
  (* src = "FSM_synth.v:8" *)
  input [2:0] umbral_alto;
  (* src = "FSM_synth.v:9" *)
  input [2:0] umbral_bajo;
  assign _028_ = _025_[0] | _025_[1];
  assign _011_[3] = _003_ | _004_;
  assign _029_ = _025_[0] | _002_;
  assign _018_ = _025_[0] | init;
  assign _030_ = _018_ | _002_;
  assign _019_[0] = _026_[0] |(* src = "FSM_synth.v:81" *)  _026_[1];
  assign _019_[1] = _026_[2] |(* src = "FSM_synth.v:81" *)  _026_[3];
  assign _019_[2] = _026_[4] |(* src = "FSM_synth.v:81" *)  _026_[5];
  assign _019_[3] = _026_[6] |(* src = "FSM_synth.v:81" *)  _026_[7];
  assign _019_[4] = _026_[8] |(* src = "FSM_synth.v:81" *)  _026_[9];
  assign _020_[0] = _019_[0] |(* src = "FSM_synth.v:81" *)  _019_[1];
  assign _020_[1] = _019_[2] |(* src = "FSM_synth.v:81" *)  _019_[3];
  assign _021_ = _020_[0] |(* src = "FSM_synth.v:81" *)  _020_[1];
  assign _031_ = _021_ |(* src = "FSM_synth.v:81" *)  _019_[4];
  assign _022_ = _009_ | _010_;
  assign _011_[2] = _022_ | _008_;
  assign _032_ = _023_ | _025_[1];
  assign _023_ = _025_[0] | _027_[1];
  assign _033_ = _023_ | _002_;
  assign _024_ = _006_ | _007_;
  assign _011_[1] = _024_ | _005_;
  assign _034_ = _018_ | _025_[1];
  assign _014_ = ~_028_;
  assign _012_ = ~_029_;
  assign _017_ = ~_030_;
  assign _002_ = ~(* src = "FSM_synth.v:81" *) _031_;
  assign _016_ = ~_032_;
  assign _015_ = ~_033_;
  assign _013_ = ~_034_;
  assign idle = estado[1] ? (* src = "FSM_synth.v:66|FSM.v:52" *) _002_ : 1'h0;
  assign interno_bajo[0] = estado[2] ? (* src = "FSM_synth.v:58|FSM.v:52" *) umbral_bajo[0] : interno_bajo_d[0];
  assign interno_bajo[1] = estado[2] ? (* src = "FSM_synth.v:58|FSM.v:52" *) umbral_bajo[1] : interno_bajo_d[1];
  assign interno_bajo[2] = estado[2] ? (* src = "FSM_synth.v:58|FSM.v:52" *) umbral_bajo[2] : interno_bajo_d[2];
  assign interno_alto[0] = estado[2] ? (* src = "FSM_synth.v:58|FSM.v:52" *) umbral_alto[0] : interno_alto_d[0];
  assign interno_alto[1] = estado[2] ? (* src = "FSM_synth.v:58|FSM.v:52" *) umbral_alto[1] : interno_alto_d[1];
  assign interno_alto[2] = estado[2] ? (* src = "FSM_synth.v:58|FSM.v:52" *) umbral_alto[2] : interno_alto_d[2];
  assign _001_[0] = reset ? (* src = "FSM_synth.v:26" *) interno_bajo[0] : 1'h0;
  assign _001_[1] = reset ? (* src = "FSM_synth.v:26" *) interno_bajo[1] : 1'h0;
  assign _001_[2] = reset ? (* src = "FSM_synth.v:26" *) interno_bajo[2] : 1'h0;
  assign _000_[0] = reset ? (* src = "FSM_synth.v:26" *) interno_alto[0] : 1'h0;
  assign _000_[1] = reset ? (* src = "FSM_synth.v:26" *) interno_alto[1] : 1'h0;
  assign _000_[2] = reset ? (* src = "FSM_synth.v:26" *) interno_alto[2] : 1'h0;
  assign _011_[0] = ~reset;
  always @(posedge clk)
      estado[0] <= _011_[0];
  always @(posedge clk)
      estado[1] <= _011_[1];
  always @(posedge clk)
      estado[2] <= _011_[2];
  always @(posedge clk)
      estado[3] <= _011_[3];
  (* src = "FSM_synth.v:24" *)
  always @(posedge clk)
      interno_alto_d[0] <= _000_[0];
  (* src = "FSM_synth.v:24" *)
  always @(posedge clk)
      interno_alto_d[1] <= _000_[1];
  (* src = "FSM_synth.v:24" *)
  always @(posedge clk)
      interno_alto_d[2] <= _000_[2];
  (* src = "FSM_synth.v:24" *)
  always @(posedge clk)
      interno_bajo_d[0] <= _001_[0];
  (* src = "FSM_synth.v:24" *)
  always @(posedge clk)
      interno_bajo_d[1] <= _001_[1];
  (* src = "FSM_synth.v:24" *)
  always @(posedge clk)
      interno_bajo_d[2] <= _001_[2];
  assign _004_ = _012_ & estado[1];
  assign _003_ = _017_ & estado[3];
  assign _005_ = _013_ & estado[1];
  assign _026_[0] = FIFO_empty[0] ^(* src = "FSM_synth.v:81" *)  1'h1;
  assign _026_[1] = FIFO_empty[1] ^(* src = "FSM_synth.v:81" *)  1'h1;
  assign _026_[2] = FIFO_empty[2] ^(* src = "FSM_synth.v:81" *)  1'h1;
  assign _026_[3] = FIFO_empty[3] ^(* src = "FSM_synth.v:81" *)  1'h1;
  assign _026_[4] = FIFO_empty[4] ^(* src = "FSM_synth.v:81" *)  1'h1;
  assign _026_[5] = FIFO_empty[5] ^(* src = "FSM_synth.v:81" *)  1'h1;
  assign _026_[6] = FIFO_empty[6] ^(* src = "FSM_synth.v:81" *)  1'h1;
  assign _026_[7] = FIFO_empty[7] ^(* src = "FSM_synth.v:81" *)  1'h1;
  assign _026_[8] = FIFO_empty[8] ^(* src = "FSM_synth.v:81" *)  1'h1;
  assign _026_[9] = FIFO_empty[9] ^(* src = "FSM_synth.v:81" *)  1'h1;
  assign _010_ = reset & estado[0];
  assign _009_ = _016_ & estado[1];
  assign _027_[1] = init ^ 1'h1;
  assign _008_ = _015_ & estado[3];
  assign _007_ = reset & estado[2];
  assign _025_[0] = reset ^ 1'h1;
  assign _025_[1] = _002_ ^ 1'h1;
  assign _006_ = _014_ & estado[3];
  assign { _027_[2], _027_[0] } = _025_;
endmodule
