$date
	Tue Nov  9 10:45:32 2021
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module banco $end
$var wire 1 ! write_enable $end
$var wire 8 " wr_ptr [7:0] $end
$var wire 1 # read_enable $end
$var wire 8 $ rd_ptr [7:0] $end
$var wire 1 % clk $end
$var wire 8 & FIFO_data_out_synth [7:0] $end
$var wire 8 ' FIFO_data_out [7:0] $end
$var wire 8 ( FIFO_data_in [7:0] $end
$scope module conductual $end
$var wire 1 ! write_enable $end
$var wire 8 ) wr_ptr [7:0] $end
$var wire 1 # read_enable $end
$var wire 8 * rd_ptr [7:0] $end
$var wire 1 % clk $end
$var wire 8 + FIFO_data_in [7:0] $end
$var reg 8 , FIFO_data_out [7:0] $end
$upscope $end
$scope module estructural $end
$var wire 1 - _002_ $end
$var wire 1 . _003_ $end
$var wire 1 / _004_ $end
$var wire 1 0 _005_ $end
$var wire 1 1 _006_ $end
$var wire 1 2 _007_ $end
$var wire 1 3 _008_ $end
$var wire 1 4 _009_ $end
$var wire 1 5 _010_ $end
$var wire 1 6 _011_ $end
$var wire 1 7 _012_ $end
$var wire 1 8 _013_ $end
$var wire 1 9 _014_ $end
$var wire 1 : _015_ $end
$var wire 1 ; _016_ $end
$var wire 1 < _025_ $end
$var wire 1 = _026_ $end
$var wire 1 > _027_ $end
$var wire 1 ? _028_ $end
$var wire 1 @ _029_ $end
$var wire 1 A _030_ $end
$var wire 1 B _031_ $end
$var wire 1 C _032_ $end
$var wire 1 ! write_enable $end
$var wire 8 D wr_ptr [7:0] $end
$var wire 1 # read_enable $end
$var wire 8 E rd_ptr [7:0] $end
$var wire 1 % clk $end
$var wire 8 F _040_ [7:0] $end
$var wire 8 G _039_ [7:0] $end
$var wire 8 H _038_ [7:0] $end
$var wire 8 I _037_ [7:0] $end
$var wire 8 J _036_ [7:0] $end
$var wire 8 K _035_ [7:0] $end
$var wire 8 L _034_ [7:0] $end
$var wire 8 M _033_ [7:0] $end
$var wire 8 N _024_ [7:0] $end
$var wire 8 O _023_ [7:0] $end
$var wire 8 P _022_ [7:0] $end
$var wire 8 Q _021_ [7:0] $end
$var wire 8 R _020_ [7:0] $end
$var wire 8 S _019_ [7:0] $end
$var wire 8 T _018_ [7:0] $end
$var wire 8 U _017_ [7:0] $end
$var wire 8 V _001_ [7:0] $end
$var wire 8 W _000_ [7:0] $end
$var wire 8 X FIFO_data_in [7:0] $end
$var reg 8 Y FIFO_data_out_synth [7:0] $end
$var reg 8 Z \ram[0] [7:0] $end
$var reg 8 [ \ram[1] [7:0] $end
$var reg 8 \ \ram[2] [7:0] $end
$var reg 8 ] \ram[3] [7:0] $end
$var reg 8 ^ \ram[4] [7:0] $end
$var reg 8 _ \ram[5] [7:0] $end
$var reg 8 ` \ram[6] [7:0] $end
$var reg 8 a \ram[7] [7:0] $end
$upscope $end
$scope module probador $end
$var wire 8 b FIFO_data_out [7:0] $end
$var reg 8 c FIFO_data_in [7:0] $end
$var reg 1 % clk $end
$var reg 8 d rd_ptr [7:0] $end
$var reg 1 # read_enable $end
$var reg 8 e wr_ptr [7:0] $end
$var reg 1 ! write_enable $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 e
b0 d
b0 c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
b0 X
bzxxx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
b0 E
b0 D
0C
0B
0A
0@
0?
0>
0=
0<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
x0
x/
x.
x-
bx ,
b0 +
b0 *
b0 )
b0 (
bx '
bx &
0%
b0 $
0#
b0 "
0!
$end
#10
b0 M
14
13
07
0.
01
0-
1;
00
06
1:
02
0/
08
05
19
b0 V
bz000 W
0C
0B
0A
0@
0?
0>
0=
1<
1#
1!
1%
#20
0%
#30
b0 U
b11111111 L
0<
b0 N
1=
04
15
09
b0 M
b0 T
bz001 W
b11111111 V
b0 R
b1 "
b1 )
b1 D
b1 e
b11111111 (
b11111111 +
b11111111 X
b11111111 c
b0 Z
1%
#40
0%
#50
b10101111 H
0=
1A
05
1/
03
1-
0;
b11111111 L
bz101 W
b10101111 V
b0 '
b0 ,
b0 b
b11111111 [
b0 &
b0 Y
b101 "
b101 )
b101 D
b101 e
b10101111 (
b10101111 +
b10101111 X
b10101111 c
1%
#60
0%
#70
b11111111 U
bx I
b10111 G
b11111111 N
0@
1B
0-
0A
0.
11
b10101111 S
b11111111 T
10
0:
0/
19
b10101111 H
b10101111 P
b11111111 R
bz110 W
b10111 V
b1 $
b1 *
b1 E
b1 d
b110 "
b110 )
b110 D
b110 e
b10111 (
b10111 +
b10111 X
b10111 c
b10101111 _
1%
#80
0%
#90
b10111000 I
1@
0B
1.
01
1-
b10101111 U
00
1:
b10111 G
b10101111 N
bz100 W
b10111000 V
b11111111 '
b11111111 ,
b11111111 b
b10111 `
b11111111 &
b11111111 Y
b101 $
b101 *
b101 E
b101 d
b1011100 "
b1011100 )
b1011100 D
b1011100 e
b10111000 (
b10111000 +
b10111000 X
b10111000 c
1%
#100
0%
#110
b1101010 F
b10111 U
1C
b10101111 H
0@
12
0-
0A
0.
b10111 N
10
0:
0/
09
b10111000 I
b10111 O
b10111000 P
b0 R
b10111 S
bx T
bz111 W
b1101010 V
b110 $
b110 *
b110 E
b110 d
b10011111 "
b10011111 )
b10011111 D
b10011111 e
b1101010 (
b1101010 +
b1101010 X
b1101010 c
b10101111 &
b10101111 Y
b10111000 ^
b10101111 '
b10101111 ,
b10101111 b
1%
#120
0%
#130
b10111 '
b10111 ,
b10111 b
b1101010 a
b10111 &
b10111 Y
1%
#140
0%
