$date
	Sun Nov  7 21:11:57 2021
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module banco $end
$var wire 1 ! write_enable $end
$var wire 8 " wr_ptr [7:0] $end
$var wire 1 # read_enable $end
$var wire 8 $ rd_ptr [7:0] $end
$var wire 1 % clk $end
$var wire 8 & FIFO_data_out_synth [7:0] $end
$var wire 8 ' FIFO_data_out [7:0] $end
$var wire 8 ( FIFO_data_in [7:0] $end
$scope module conductual $end
$var wire 8 ) FIFO_data_out [7:0] $end
$var wire 1 ! write_enable $end
$var wire 8 * wr_ptr [7:0] $end
$var wire 1 # read_enable $end
$var wire 8 + rd_ptr [7:0] $end
$var wire 1 % clk $end
$var wire 8 , FIFO_data_in [7:0] $end
$upscope $end
$scope module estructural $end
$var wire 1 - _002_ $end
$var wire 1 . _003_ $end
$var wire 1 / _004_ $end
$var wire 1 0 _005_ $end
$var wire 1 1 _006_ $end
$var wire 1 2 _007_ $end
$var wire 1 3 _008_ $end
$var wire 1 4 _009_ $end
$var wire 1 5 _010_ $end
$var wire 1 6 _011_ $end
$var wire 1 7 _012_ $end
$var wire 1 8 _013_ $end
$var wire 1 9 _014_ $end
$var wire 1 : _015_ $end
$var wire 1 ; _016_ $end
$var wire 1 < _023_ $end
$var wire 1 = _024_ $end
$var wire 1 > _025_ $end
$var wire 1 ? _026_ $end
$var wire 1 @ _027_ $end
$var wire 1 A _028_ $end
$var wire 1 B _029_ $end
$var wire 1 C _030_ $end
$var wire 1 ! write_enable $end
$var wire 8 D wr_ptr [7:0] $end
$var wire 1 # read_enable $end
$var wire 8 E rd_ptr [7:0] $end
$var wire 1 % clk $end
$var wire 8 F _038_ [7:0] $end
$var wire 8 G _037_ [7:0] $end
$var wire 8 H _036_ [7:0] $end
$var wire 8 I _035_ [7:0] $end
$var wire 8 J _034_ [7:0] $end
$var wire 8 K _033_ [7:0] $end
$var wire 8 L _032_ [7:0] $end
$var wire 8 M _031_ [7:0] $end
$var wire 8 N _022_ [7:0] $end
$var wire 8 O _021_ [7:0] $end
$var wire 8 P _020_ [7:0] $end
$var wire 8 Q _019_ [7:0] $end
$var wire 8 R _018_ [7:0] $end
$var wire 8 S _017_ [7:0] $end
$var wire 8 T _001_ [7:0] $end
$var wire 8 U _000_ [7:0] $end
$var wire 8 V FIFO_data_out_synth [7:0] $end
$var wire 8 W FIFO_data_in [7:0] $end
$var reg 8 X \ram[0] [7:0] $end
$var reg 8 Y \ram[1] [7:0] $end
$var reg 8 Z \ram[2] [7:0] $end
$var reg 8 [ \ram[3] [7:0] $end
$var reg 8 \ \ram[4] [7:0] $end
$var reg 8 ] \ram[5] [7:0] $end
$var reg 8 ^ \ram[6] [7:0] $end
$var reg 8 _ \ram[7] [7:0] $end
$upscope $end
$scope module probador $end
$var wire 8 ` FIFO_data_out [7:0] $end
$var reg 8 a FIFO_data_in [7:0] $end
$var reg 1 % clk $end
$var reg 8 b rd_ptr [7:0] $end
$var reg 1 # read_enable $end
$var reg 8 c wr_ptr [7:0] $end
$var reg 1 ! write_enable $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 c
b0 b
b0 a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
b0 W
bx V
bzxxx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
b0 E
b0 D
0C
0B
0A
0@
0?
0>
0=
0<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
x0
x/
x.
x-
b0 ,
b0 +
b0 *
bx )
b0 (
bx '
bx &
0%
b0 $
0#
b0 "
0!
$end
#10
b11111111 L
13
0-
00
06
11
02
05
08
0/
07
1;
0.
04
1:
09
b11111111 T
bz001 U
0C
0B
0A
0@
0?
0>
1=
0<
1#
1!
b1 "
b1 *
b1 D
b1 c
b11111111 (
b11111111 ,
b11111111 W
b11111111 a
1%
#20
0%
#30
b10101111 H
0=
b11111111 &
b11111111 V
1A
03
1-
01
b11111111 S
17
0;
b11111111 L
b11111111 Q
bz101 U
b10101111 T
b11111111 '
b11111111 )
b11111111 `
b1 $
b1 +
b1 E
b1 b
b101 "
b101 *
b101 D
b101 c
b10101111 (
b10101111 ,
b10101111 W
b10101111 a
b11111111 Y
1%
#40
0%
#50
b10111 K
1>
15
14
0A
07
1;
0:
0-
19
b10101111 H
bx Q
bx S
bx &
bx V
bz010 U
b10111 T
b10101111 ]
bx '
bx )
bx `
b1110110 $
b1110110 +
b1110110 E
b1110110 b
b10001010 "
b10001010 *
b10001010 D
b10001010 c
b10111 (
b10111 ,
b10111 W
b10111 a
1%
#60
0%
#70
b10111000 I
b11111111 &
b11111111 V
1@
0>
18
05
b10101111 R
b11111111 S
17
0;
04
1:
b10111 K
b10101111 O
b11111111 Q
bz100 U
b10111000 T
b11111111 '
b11111111 )
b11111111 `
b1 $
b1 +
b1 E
b1 b
b1011100 "
b1011100 *
b1011100 D
b1011100 c
b10111000 (
b10111000 ,
b10111000 W
b10111000 a
b10111 Z
1%
#80
0%
#90
b1101010 F
1C
b10101111 H
0@
10
07
0A
08
b10111 &
b10111 V
1.
0:
0-
09
b10111000 I
b10111000 O
b10111 P
bx Q
bx R
b10111 S
bz111 U
b1101010 T
b10111000 \
bx '
bx )
bx `
b10001010 $
b10001010 +
b10001010 E
b10001010 b
b10011111 "
b10011111 *
b10011111 D
b10011111 c
b1101010 (
b1101010 ,
b1101010 W
b1101010 a
1%
#100
0%
#110
b1101010 _
1%
#120
0%
